#!/bin/bash
export DOCKER_USER="jheepuser"
export USERID="$( id -u )"
#export GROUPID="$( id -g )"
#export USERID=1000
export GROUPID=0

export GIT_REF=$(git rev-parse --short=8 HEAD)
export IMG_TAG="${GIT_REF}"

export JHEEP_APP_DIR="/jheep"
export JHEEP_BACK_DIR="${JHEEP_APP_DIR}/backend"
export JHEEP_FRONT_DIR="${JHEEP_APP_DIR}/frontend"
export JHEEP_EXAMPLES_DIR="${JHEEP_APP_DIR}/examples"
export JHEEP_CONFIG_DIR="${JHEEP_APP_DIR}/.config"

project_name="jheep-dev"

fn_help()
{
    echo "jc: JHEEP dev cli"
    echo
    echo "Jinserk Baik <jinserk.baik@gmail.com>"
    echo "copyright (c) JHEE Group LLC"
    echo
    echo "default usage:"
    echo "  jc up                               run compose env in background"
    echo "  jc down                             teardown compose env"
    echo "  jc logs                             show logs from the compose env"
    echo "  jc build                            build all docker images"
    echo "  jc push                             push the latest images to the github packages"
    echo "  jc pull                             pull the latest images from the github packages"
    echo "  jc createdb                         wrapper cmd to run createdb in db container"
    echo "  jc dropdb                           wrapper cmd to run dropdb in db container"
    echo "  jc makemigrations                   wrapper cmd to run 'jheep makemigrations' in server container"
    echo "  jc migrate                          wrapper cmd to run 'jheep migrate' in server container"
    echo
    echo "usage for db container:"
    echo "  jc db logs                          show logs from the db container"
    echo "  jc db psql [<args>]                 psql env in the db container"
    echo "  jc db createdb [<args>]             run createdb in the db container"
    echo "  jc db dropdb [<args>]               run dropdb in the db container"
    echo
    echo "usage for server/worker container:"
    echo "  jc <container> logs                 show logs from the <container>"
    echo "  jc <container> build                build the <container>"
    echo "  jc <container> push                 push the <container> to the github packages"
    echo "  jc <container> pull                 pull the <container> from the github packages"
    echo "  jc <container> jheep [<args>]       exec the jheep cli command in the <container>"
    echo "  jc <container> bash [<args>]        exec bash in the <container>"
    echo
}

fn_docker_login()
{
    if [ -f ${JHEEP_PATH}/.github/.pat ]; then
        . ${JHEEP_PATH}/.github/.pat
        echo ${CR_PAT} | docker login ghcr.io -u ${CR_USER} --password-stdin
    fi
}

fn_check_gitrepo ()
{
    git_test=$(git status --untracked-files=no --porcelain)
    [[ -z $git_test ]] || echo -e "\n*** Be careful that you have a dirty code tree **\n"
}

fn_pull ()
{
    [[ $# -lt 1 ]] && fn_help && exit 1
    img=$1
    fn_docker_login
    docker pull "${img}:latest"
}

fn_push ()
{
    [[ $# -lt 1 ]] && fn_help && exit 1
    img=$1
    fn_docker_login
    docker tag ${img}:latest ${img}:${GIT_REF}
    docker push "${img}:${GIT_REF}"
    docker push "${img}:latest"
}

fn_db_cmd()
{
    [[ $# -lt 1 ]] && fn_help && exit 1

    container="db"
    dbuser="postgres"
    dbname="jheep_db"

    docker_file="${JHEEP_PATH}/.docker/docker-compose.yml"
    docker_cmd="docker-compose -f ${docker_file} -p ${project_name}"

    case $1 in
        "logs")
            ${docker_cmd} logs ${container}
            ;;
        "reset")
            ${docker_cmd} exec ${container} bash -c "dropdb -U ${dbuser} ${dbname} && createdb -U ${dbuser} ${dbname}"
            ;;
        "psql")
            ${docker_cmd} exec ${container} psql -U ${dbuser} ${@:2}
            ;;
        *)
            ${docker_cmd} exec ${container} ${@:1}
            ;;
    esac
}

fn_dev_cmd()
{
    [[ $# -lt 1 ]] && fn_help && exit 1

    container="dev"
    img="${DOCKER_REGISTRY}/jheep-dev"

    docker_file="${JHEEP_PATH}/.docker/docker-compose.yml"
    docker_cmd="docker-compose -f ${docker_file} -p ${project_name}"
    
    case $1 in
        "logs")
            ${docker_cmd} logs ${container}
            ;;
        "up")
            ${docker_cmd} up -d --remove-orphans
            ;;
        "down")
            ${docker_cmd} down --remove-orphans
            ;;
        "build")
            fn_check_gitrepo
            #fn_pull "${DOCKER_REGISTRY}/jheep-base"
            ${docker_cmd} build --pull ${container}
            ;;
        "jheep")
            ${docker_cmd} exec ${container} jheep ${@:2}
            ;;
        "test")
            ${docker_cmd} exec ${container} pytest -s ${@:2}
            ;;
        "bash")
            ${docker_cmd} exec ${container} bash ${@:2}
            ;;
        "release")
            ${docker_cmd} exec ${container} bumpversion --list ${@:2}
            ;;
        *)
            ${docker_cmd} exec ${container} ${@:1}
            ;;
    esac
}

fn_server_cmd()
{
    [[ $# -lt 1 ]] && fn_help && exit 1

    container="server"
    img="${DOCKER_REGISTRY}/jheep-server"

    docker_file="${JHEEP_PATH}/.docker/docker-compose.server.yml"
    docker_cmd="docker-compose -f ${docker_file} -p ${project_name}"
    
    case $1 in
        "logs")
            ${docker_cmd} logs ${container}
            ;;
        "build")
            fn_check_gitrepo
            #fn_pull "${DOCKER_REGISTRY}/jheep-base"
            ${docker_cmd} build --pull ${container}
            ;;
        "push")
            fn_push ${img}
            ;;
        "pull")
            fn_pull ${img}
            ;;
        "bash")
            ${docker_cmd} exec ${container} bash ${@:2}
            ;;
        *)
            ${docker_cmd} exec ${container} ${@:1}
            ;;
    esac
}

fn_worker_cmd()
{
    [[ $# -lt 1 ]] && fn_help && exit 1

    container="worker"
    img="${DOCKER_REGISTRY}/jheep-worker"

    docker_file="${JHEEP_PATH}/.docker/docker-compose.worker.yml"
    docker_cmd="docker-compose -f ${docker_file} -p ${project_name}"
    
    case $1 in
        "up")
            ${docker_cmd} up -d --remove-orphans
            ;;
        "logs")
            ${docker_cmd} logs ${container}
            ;;
        "build")
            fn_check_gitrepo
            #fn_pull "${DOCKER_REGISTRY}/jheep-base"
            ${docker_cmd} build --pull ${container}
            ;;
        "push")
            fn_push ${img}
            ;;
        "pull")
            fn_pull ${img}
            ;;
        #"jheep")
        #    ${docker_cmd} exec ${container} jheep ${@:2}
        #    ;;
        "bash")
            ${docker_cmd} exec ${container} bash ${@:2}
            ;;
        *)
            ${docker_cmd} exec ${container} ${@:1}
            ;;
    esac
}

fn_mlserver_cmd()
{
    [[ $# -lt 1 ]] && fn_help && exit 1
    
    container="mlserver"
    img="${DOCKER_REGISTRY}/jheep-mlserver"

    docker_file="${JHEEP_PATH}/.docker/docker-compose.mlserver.yml"
    docker_cmd="docker-compose -f ${docker_file} -p ${project_name}"
 
    fn_docker_login

    case $1 in
        "up")
            ${docker_cmd} up -d --remove-orphans
            ;;
        "logs")
            ${docker_cmd} logs ${@:2}
            ;;
        "build")
            fn_check_gitrepo
            ${docker_cmd} build --pull ${container}
            ;;
        "push")
            fn_push ${img}
            ;;
        "pull")
            fn_pull ${img}
            ;;
        "bash")
            ${docker_cmd} exec ${container} bash ${@:2}
            ;;
        *)
            ;;
    esac
}

fn_base_cmd()
{
    [[ $# -lt 1 ]] && fn_help && exit 1

    docker_file="${JHEEP_PATH}/backend/.docker/Dockerfile.base"
    img="${DOCKER_REGISTRY}/jheep-base"

    case $1 in
        "build")
            fn_check_gitrepo
            docker build -f ${docker_file} -t "${img}:${GIT_REF}" --pull \
                --build-arg "GIT_REF=${GIT_REF}" \
                --build-arg "USERNAME=${DOCKER_USER}" \
                --build-arg "USERID=${USERID}" \
                --build-arg "GROUPID=${GROUPID}" \
                ${JHEEP_PATH}/backend
            docker tag "${img}:${GIT_REF}" "${img}:latest"
            ;;
        "push")
            fn_push ${img}
            ;;
        "pull")
            fn_pull ${img}
            ;;
        *)
            fn_help
            ;;
    esac
}

##########
# default command parser

[[ $# -lt 1 ]] && fn_help && exit 1

case $1 in
    "up")
        fn_dev_cmd up
        ;;
    "down")
        fn_dev_cmd down
        ;;
    "logs")
        fn_dev_cmd logs
        ;;
    "build")
        fn_base_cmd build
        fn_dev_cmd build
        fn_server_cmd build
        fn_worker_cmd build
        fn_mlserver_cmd build
        ;;
    "push")
        fn_base_cmd push
        fn_server_cmd push
        fn_worker_cmd push
        fn_mlserver_cmd push
        ;;
    "pull")
        fn_base_cmd pull
        fn_server_cmd pull
        fn_worker_cmd pull
        fn_mlserver_cmd pull
        ;;
    "createdb")
        fn_db_cmd createdb
        ;;
    "dropdb")
        fn_db_cmd dropdb
        ;;
    "makemigrations")
        fn_dev_cmd jheep makemigrations
        ;;
    "migrate")
        fn_dev_cmd jheep migrate
        ;;
    "test")
        fn_dev_cmd test
        ;;
    "release")
        fn_dev_cmd release ${@:2}
        ;;
    # base image cmd
    "base")
        fn_base_cmd ${@:2}
        ;;
    # container based cmd
    "db")
        fn_db_cmd ${@:2}
        ;;
    "server")
        fn_server_cmd ${@:2}
        ;;
    "worker")
        fn_worker_cmd ${@:2}
        ;;
    "mlserver")
        fn_mlserver_cmd ${@:2}
        ;;
    "dev")
        fn_dev_cmd ${@:2}
        ;;
    *)
        fn_help
        ;;
esac
