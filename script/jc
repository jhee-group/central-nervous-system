#!/bin/bash
export DOCKER_USER="jheepuser"
export USERID="$( id -u )"
export GROUPID=0

export GIT_REF=$(git rev-parse --short=8 HEAD)
export IMG_TAG="${GIT_REF}"

export BACK_APP_DIR="/backend"
export FRONT_APP_DIR="/frontend"

docker_file="${JHEEP_PATH}/.docker/docker-compose.yml"
project_name="jheep-dev"
docker_cmd="docker compose -f ${docker_file} -p ${project_name}"

fn_help()
{
    echo "jc: JHEEP dev cli"
    echo
    echo "Jinserk Baik <jinserk.baik@gmail.com>"
    echo "copyright (c) JHEE Group LLC"
    echo
    echo "default usage: "
    echo "  jc up                       run compose env in background"
    echo "  jc down                     teardown compose env"
    echo "  jc logs                     show logs from the compose env"
    echo
    echo "usage for db container: "
    echo "  jc db logs                  show logs from the db container"
    echo "  jc db psql [<args>]         psql env in the db container"
    echo
    echo "usage for back container: "
    echo "  jc back logs                show logs from the back container"
    echo "  jc back build               build the back container"
    echo "  jc back push                push the back container to the github packages"
    echo "  jc back pull                pull the back container from the github packages"
    echo "  jc back jheep [<args>]      exec the jheep cli command in the back container"
    echo "  jc back bash [<args>]       exec bash in the back container"
    echo
    echo "usage for worker container: "
    echo "  jc worker logs              show logs from the back container"
    echo "  jc worker build             build the back container"
    echo "  jc worker push              push the back container to the github packages"
    echo "  jc worker pull              pull the back container from the github packages"
    echo "  jc worker jheep [<args>]    exec the jheep cli command in the back container"
    echo "  jc worker bash [<args>]     exec bash in the back container"
    echo
}

fn_login_to_github()
{
    if [ -f ${JHEEP_PATH}/.github/.pat ]; then
        . ${JHEEP_PATH}/.github/.pat
        echo ${CR_PAT} | docker login ghcr.io -u ${CR_USER} --password-stdin
    fi
}

fn_db_cmd()
{
    [[ $# -lt 1 ]] && fn_help && exit 1

    dbuser="postgres"
    dbname="jheep_db"

    case $1 in
        "logs")
            ${docker_cmd} logs db
            ;;
        "createdb")
            ${docker_cmd} exec db createdb -U ${dbuser} ${dbname}
            ;;
        "dropdb")
            ${docker_cmd} exec db dropdb -U ${dbuser} ${dbname}
            ;;
        "psql")
            ${docker_cmd} exec db psql -U ${dbuser} ${@:2}
            ;;
        *)
            fn_help
            ;;
    esac
}

fn_back_cmd()
{
    [[ $# -lt 1 ]] && fn_help && exit 1

    container="back"

    case $1 in
        "logs")
            ${docker_cmd} logs ${container}
            ;;
        "build")
            ${docker_cmd} build ${container}
            ;;
        "push")
            fn_login_to_github
            ${docker_cmd} push ${container}
            ;;
        "pull")
            fn_login_to_github
            ${docker_cmd} pull ${container}
            ;;
        "jheep")
            ${docker_cmd} exec ${container} jheep ${@:2}
            ;;
        "bash")
            ${docker_cmd} exec ${container} bash ${@:2}
            ;;
        *)
            fn_help
            ;;
    esac
}

fn_worker_cmd()
{
    [[ $# -lt 1 ]] && fn_help && exit 1

    container="worker"

    case $1 in
        "logs")
            ${docker_cmd} logs ${container}
            ;;
        "build")
            ${docker_cmd} build ${container}
            ;;
        "push")
            fn_login_to_github
            ${docker_cmd} push ${container}
            ;;
        "pull")
            fn_login_to_github
            ${docker_cmd} pull ${container}
            ;;
        "jheep")
            ${docker_cmd} exec ${container} jheep ${@:2}
            ;;
        "bash")
            ${docker_cmd} exec ${container} bash ${@:2}
            ;;
        *)
            fn_help
            ;;
    esac
}

##########
# main 

[[ $# -lt 1 ]] && fn_help && exit 1

case $1 in
    "up")
        ${docker_cmd} up -d --remove-orphans
        ;;
    "down")
        ${docker_cmd} down --remove-orphans
        ;;
    "logs")
        ${docker_cmd} logs -f
        ;;
    # container based cmd
    "db")
        fn_db_cmd ${@:2}
        ;;
    "back")
        fn_back_cmd ${@:2}
        ;;
    "worker")
        fn_worker_cmd ${@:2}
        ;;
    *)
        fn_help
        ;;
esac
